const axios = require('axios');

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models';

// Available Gemini models with their configurations
const GEMINI_MODELS = {
    'gemini-2.0-flash': {
        name: 'gemini-2.0-flash',
        displayName: 'Gemini 2.0 Flash',
        description: 'Latest and fastest Gemini model - 15 RPM, 1M tokens',
        maxTokens: 1500,
        rpm: 15
    },
    'gemini-2.0-flash-lite': {
        name: 'gemini-2.0-flash-lite',
        displayName: 'Gemini 2.0 Flash Lite',
        description: 'Lightweight version - 30 RPM, 1M tokens, faster responses',
        maxTokens: 1500,
        rpm: 30
    },
    'gemini-2.0-flash-experimental': {
        name: 'gemini-2.0-flash-experimental',
        displayName: 'Gemini 2.0 Flash (Experimental)',
        description: 'Experimental features - 10 RPM, 1M tokens',
        maxTokens: 1000,
        rpm: 10
    },
    'gemini-2.5-flash-preview': {
        name: 'gemini-2.5-flash-preview',
        displayName: 'Gemini 2.5 Flash Preview',
        description: 'Preview of next generation - 10 RPM, 250K tokens',
        maxTokens: 500,
        rpm: 10
    },
    'gemini-1.5-flash': {
        name: 'gemini-1.5-flash',
        displayName: 'Gemini 1.5 Flash',
        description: 'Stable and reliable - 15 RPM, 250K tokens',
        maxTokens: 500,
        rpm: 15
    },
    'gemini-1.5-flash-8b': {
        name: 'gemini-1.5-flash-8b',
        displayName: 'Gemini 1.5 Flash-8B',
        description: 'Compact 8B model - 15 RPM, 250K tokens, efficient',
        maxTokens: 500,
        rpm: 15
    },
    'gemma-3': {
        name: 'gemma-3',
        displayName: 'Gemma 3',
        description: 'Open source model - 30 RPM, 15K tokens',
        maxTokens: 400,
        rpm: 30
    }
};

const generateWithGemini = async (topic, variant = 'general', modelName = 'gemini-2.0-flash') => {
    if (!GEMINI_API_KEY || GEMINI_API_KEY === 'your_gemini_api_key_here') {
        throw new Error('Gemini API key not configured');
    }

    const modelConfig = GEMINI_MODELS[modelName];
    if (!modelConfig) {
        throw new Error(`Unknown Gemini model: ${modelName}`);
    }

    const prompt = createGeminiPrompt(topic, variant);
    
    try {
        console.log(`Calling Gemini API with model: ${modelConfig.displayName}`);
        console.log('Prompt:', prompt);
        
        const url = `${GEMINI_BASE_URL}/${modelConfig.name}:generateContent?key=${GEMINI_API_KEY}`;
        
        const response = await axios.post(url, {
            contents: [{
                parts: [{
                    text: prompt
                }]
            }],
            generationConfig: {
                temperature: getTemperatureForModel(modelName),
                topK: 40,
                topP: 0.95,
                maxOutputTokens: modelConfig.maxTokens,
                stopSequences: ["---", "###", "END", "\n\n---"]
            },
            safetySettings: [
                {
                    category: "HARM_CATEGORY_HARASSMENT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    category: "HARM_CATEGORY_HATE_SPEECH",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                }
            ]
        }, {
            headers: {
                'Content-Type': 'application/json',
            },
            timeout: 30000
        });

        console.log(`${modelConfig.displayName} API Response status:`, response.status);

        if (response.data && 
            response.data.candidates && 
            response.data.candidates.length > 0 && 
            response.data.candidates[0].content &&
            response.data.candidates[0].content.parts &&
            response.data.candidates[0].content.parts.length > 0) {
            
            const generatedText = response.data.candidates[0].content.parts[0].text;
            console.log(`Generated text from ${modelConfig.displayName}:`, generatedText);
            
            return cleanGeminiText(generatedText);
        } else {
            console.error('Unexpected Gemini response structure:', response.data);
            throw new Error(`No content generated by ${modelConfig.displayName}`);
        }

    } catch (error) {
        console.error(`${modelConfig.displayName} API error:`, error.response?.data || error.message);
        
        if (error.response?.status === 404) {
            console.error(`Model ${modelConfig.name} not found. It might not be available in your region.`);
        } else if (error.response?.status === 429) {
            console.error(`Rate limit exceeded for ${modelConfig.displayName}. RPM limit: ${modelConfig.rpm}`);
        }
        
        throw error;
    }
};

const getTemperatureForModel = (modelName) => {
    switch (modelName) {
        case 'gemini-2.0-flash':
        case 'gemini-2.0-flash-experimental':
            return 0.7; // Balanced creativity
        case 'gemini-2.0-flash-lite':
        case 'gemini-1.5-flash-8b':
            return 0.6; // Slightly more focused for efficiency
        case 'gemini-2.5-flash-preview':
            return 0.8; // Higher creativity for preview model
        case 'gemini-1.5-flash':
            return 0.7; // Balanced
        case 'gemma-3':
            return 0.8; // Higher creativity for open source model
        default:
            return 0.7;
    }
};

const createGeminiPrompt = (topic, variant) => {
    const baseInstruction = `You are a social media expert. Create engaging Twitter content about "${topic}".`;
    
    let specificInstruction = '';
    
    switch (variant) {
        case 'technical':
            specificInstruction = `Focus on technical insights, practical benefits, and developer-friendly language. Include specific features, performance improvements, code examples, and real-world applications. Use appropriate technical terminology.`;
            break;
        case 'business':
            specificInstruction = `Focus on business value, ROI, market impact, and strategic insights. Include metrics, success stories, competitive advantages, market trends, and business outcomes.`;
            break;
        case 'creative':
            specificInstruction = `Focus on creativity, inspiration, artistic possibilities, and innovative applications. Use engaging, imaginative language that sparks curiosity and encourages exploration.`;
            break;
        case 'news':
            specificInstruction = `Focus on recent developments, breaking news, industry updates, and trending topics. Use timely language and current context.`;
            break;
        case 'educational':
            specificInstruction = `Focus on teaching and explaining concepts clearly. Break down complex topics into digestible insights with practical examples.`;
            break;
        default:
            specificInstruction = `Make it informative, engaging, and accessible to a general audience. Focus on practical value and interesting insights.`;
    }

    return `${baseInstruction} ${specificInstruction}

Requirements:
- If the content needs more than 280 characters, create a Twitter thread with multiple tweets
- Each individual tweet must be under 280 characters
- If creating a thread, number the tweets (1/3, 2/3, 3/3, etc.)
- Make each tweet complete but connected to the overall narrative
- Use appropriate emojis (2-3 per tweet maximum)
- Include 2-3 relevant hashtags at the end of the last tweet
- Focus on practical value and actionable insights
- Write in a conversational, engaging tone
- Avoid redundancy between tweets

Topic: ${topic}

Generate the Twitter content now:`;
};

const cleanGeminiText = (text) => {
    console.log('Cleaning Gemini text:', text);
    
    // Remove common prefixes that Gemini might add
    const prefixes = [
        /^Here's a Twitter thread about.*?:\s*/i,
        /^Here's some Twitter content about.*?:\s*/i,
        /^Here are tweets about.*?:\s*/i,
        /^Twitter thread:\s*/i,
        /^Tweet thread:\s*/i,
        /^Thread:\s*/i,
        /^Tweets?:\s*/i,
        /^Content:\s*/i
    ];
    
    for (const prefix of prefixes) {
        text = text.replace(prefix, '');
    }
    
    // Clean up formatting
    text = text.replace(/\*\*(.*?)\*\*/g, '$1'); // Remove bold
    text = text.replace(/\*(.*?)\*/g, '$1'); // Remove italic
    text = text.replace(/`(.*?)`/g, '$1'); // Remove code blocks
    text = text.replace(/#{1,6}\s*/g, ''); // Remove markdown headers
    
    // Remove trailing instructions
    const stopPhrases = [
        'Note:', 'Remember:', 'This thread', 'These tweets',
        'Feel free to', 'You can also', 'Additional',
        'Would you like', 'Let me know', 'Hope this helps',
        'Follow for more', 'Subscribe', 'Like and retweet'
    ];
    
    for (const phrase of stopPhrases) {
        const index = text.indexOf(phrase);
        if (index !== -1) {
            text = text.substring(0, index);
        }
    }
    
    // Clean up extra whitespace
    text = text.replace(/\n\s*\n/g, '\n').trim();
    
    console.log('Cleaned Gemini text:', text);
    return text;
};

// Function to list available models
const listAvailableModels = async () => {
    if (!GEMINI_API_KEY || GEMINI_API_KEY === 'your_gemini_api_key_here') {
        throw new Error('Gemini API key not configured');
    }

    try {
        const url = `${GEMINI_BASE_URL}?key=${GEMINI_API_KEY}`;
        const response = await axios.get(url);
        console.log('Available Gemini models from API:', response.data);
        return response.data;
    } catch (error) {
        console.error('Error listing models:', error.response?.data || error.message);
        throw error;
    }
};

// Test a specific model
const testModel = async (modelName, testTopic = 'artificial intelligence') => {
    try {
        console.log(`Testing model: ${modelName}`);
        const result = await generateWithGemini(testTopic, 'general', modelName);
        return {
            model: modelName,
            success: true,
            result: result
        };
    } catch (error) {
        return {
            model: modelName,
            success: false,
            error: error.message
        };
    }
};

module.exports = {
    generateWithGemini,
    listAvailableModels,
    testModel,
    GEMINI_MODELS
};